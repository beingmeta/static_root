;;; -*- Mode: Scheme; -*-

(use-module '{fdweb xhtml texttools xhtml/tableout})

(define (main (name) (cookiename #f) (cookieval "set")
	      (dropcookie {}) (filedata #f))
  ;; (+ 2 "two")
  (when (and cookiename (not (empty-string? cookiename)))
    (req/add! 'cookiedata
      (vector (string->symbol (upcase cookiename)) cookieval))
    (set-cookie! cookiename cookieval))
  (when (exists? dropcookie)
    (do-choices dropcookie (clear-cookie! dropcookie)))
  (title! "Get connection info")
  (javascript! "/static/fdjt/fdjt.js")
  (stylesheet! "/static/fdjt/fdjt.css")
  (req/set! 'syshost (gethostname))
  (h2 "appVersion (from DOM/JS)")
  (div ((id "APPVERSION")))
  (h2 "userAgent (from DOM/JS)")
  (div ((id "USERAGENT")))
  (h2 "Args")
  (if (bound? name)
      (p "NAME is " name " or also " (req/call showname))
      (p "The NAME argument was not passed, so REQ/GET delivers "
	(req/get 'name) "."))
  (form ()
    (p "Pass the name "
      (input TYPE "TEXT" NAME "NAME"
	     VALUE (if (bound? name) name ""))
      (input TYPE "SUBMIT" NAME "ACTION" VALUE "Submit")))
  (h2 "COOKIES")
  (form ()
    (p "Set the cookie "
      (input TYPE "TEXT" NAME "COOKIENAME" VALUE "")
      " to "
      (input TYPE "TEXT" NAME "COOKIEVAL" VALUE "")
      (input TYPE "SUBMIT" NAME "ACTION" VALUE "Submit"))
    (do-choices (cookie (req/get 'cookiedata #{}))
      (p "Drop "
	(input TYPE "CHECKBOX" NAME "DROPCOOKIE" VALUE (first cookie))
	" " (first cookie) "=" (second cookie))))
  (h2 "FILEDATA")
  (when filedata)
  (form ((METHOD "POST") (enctype "multipart/form-data"))
    (p "File: " (input TYPE "FILE" NAME "FILEDATA") " "
      (input TYPE "SUBMIT" NAME "ACTION" VALUE "Upload")))
  (h2 "REQDATA")
  (let ((reqdata (req/data)))
    (output-table reqdata))
  (xmlblock "SCRIPT" ((language "javascript"))
    "\n"
    (xhtml "document.getElementById('APPVERSION').innerHTML=navigator.appVersion;\n")
    (xhtml "document.getElementById('USERAGENT').innerHTML=navigator.userAgent;\n")))

(define (output-table table)
  (table* ((class "fdjtdata"))
    (do-choices (key (getkeys table))
      (let ((val (get table key)))
	(tr (th key)
	    (td (output-value val)))))))

(defambda (output-value val)
  (cond ((ambiguous? val)
	 (xmlblock UL ()
	   (do-choices (v val)
	     (if (not (bound? v))
		 (li "#?")
		 (li (output-value v))))))
	((or (proper-list? val) (vector? val))
	 (xmlblock OL ()
	   (doseq (v val)
	     (if (not (bound? v))
		 (li "#?")
		 (li (output-value v))))))
	((and (or (packet? val) (string? val)) (> (length val) 250))
	 (anchor* (stringout "data:" (if (string? val) "text" "application")
		    (if (string? val) ";charset=utf-8")
		    (if (packet? val) ";base64," ",")
		    (if (string? val) (uriencode val) (packet->base64 val)))
	     ((target "_blank"))
	   (length val)
	   (if (packet? val)  " bytes of data" " characters of text")))
	((packet? val) val)
	((string? val) (xmlout val))
	((pair? val) val)
	((table? val)
	 (let ((s (stringout val)))
	   (if (> (length s) 77)
	       (output-table val)
	       s)))
	(else val)))

(define (showname (name #f))
  (span ((class "showname")) name))
