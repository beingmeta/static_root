#!/usr/bin/env fdexec
;;; -*- Mode: Scheme; -*-
(use-module '{logger texttools sbooks aws/s3 gpath mttools varconfig})

(define %loglevel %notice%)

(define root (->s3loc "s3://static.beingmeta.com/"))
(define pubheaders '("x-amz-acl: public-read"))
(define gzheaders '("x-amz-acl: public-read"
		    "Content-encoding\: gzip"))
(define graphics
  {"g/codex/" "g/metabook/" "g/sbooks/" "g/showsomeclass/" "g/beingmeta/"
   "g/metabook/docs/" "g/codex/docs/"})

(define dist-targets-file (get-component "dist-targets"))
(define dist-targets
  (remove-if empty-string?
	     (segment (filestring dist-targets-file) "\n")))
;;(set! dist-targets '("s3://beingmeta/static/"))

(define forcewrite #f)
(varconfig! force forcewrite config:boolean)

(define (push-graphics dir (hdrs pubheaders))
  (let ((updated
	 (choice (s3/push! dir (s3/mkpath root dir)
			   #{".png" ".gif" ".svg" ".jpg" ".jpeg" ".wav" ".ogg"}
			   hdrs forcewrite)
		 (s3/push! dir (s3/mkpath root dir) ".svgz"
			   gzheaders forcewrite))))
    updated))

(define (docopy file from to (hdrs pubheaders))
  (when (string? from) (set! from (->s3loc from)))
  (when (string? to) (set! to (->s3loc (strip-slash to))))
  (let* ((from (s3/mkpath from file))
	 (to (s3/mkpath to file)))
    (if forcewrite
	(begin (loginfo "Copying " file
			" from " (s3loc->string from)
			" to " (s3loc->string to))
	  (s3/copy! from to #f '() hdrs))
	(let ((frominfo (s3/info from))
	      (toinfo (s3/info to)))
	  (unless (and (exists? toinfo) (exists? frominfo) frominfo toinfo
		       (equal? (get toinfo 'etag) (get frominfo 'etag)))
	    (loginfo "Updating " (s3loc->string from) " to " (s3loc->string to))
	    (s3/copy! from to #f '() hdrs))))))

(define (strip-slash s) (if (has-prefix s "/") (slice s 1) s))

(define (copyall from to (hdrs pubheaders))
  (when (string? from) (set! from (->s3loc from)))
  (when (string? to) (set! to (->s3loc to)))
  (let* ((fromlist (s3/list+ from))
	 (tolist (s3/list+ to))
	 (locs (for-choices (info fromlist)
		 (if (has-suffix (get info 'key) "/") (fail)
		     (get info 'loc)))))
    (do-choices-mt (loc locs (config 's3copythreads (config 's3threads 8)))
      (let* ((from loc)
	     (to (s3/mkpath to (strip-slash (s3loc-path from))))
	     (frominfo (try (pick fromlist 'loc from)
			    (s3/info from)))
	     (toinfo (try (pick tolist 'loc to)
			  (s3/info to))))
	(unless (and (exists? toinfo) toinfo
		     (equal? (get toinfo 'etag)
			     (get frominfo 'etag)))
	  (s3/copy! from to #f '() hdrs))))))

(define (distribute local changed remotes)
  (set! remotes (map (lambda (x) (if (string? x) (->s3loc x) x))
		     remotes))
  (if (fail? changed)
      (lognotice "No changes under " local " to distribute")
      (lognotice "Distributing " (choice-size changed)
		 " changes from " local
		 "\n    through " (gpath->string root) " to "
		 (dolist (r remotes)
		   (printout "\n\t" (s3loc->string r)))))
  (when (exists? changed)
    (let ((paths (strip-slash (s3loc-path changed))))
      (dolist (r remotes)
	(let* ((remote r)
	       (nthreads (config 's3copythreads (config 's3threads 8))))
	  (logwarn "Distributing " (choice-size paths)
		   " files to " (gpath->string remote)
		   " from " (s3loc->string root))
	  (if (and (> nthreads 1) (> (choice-size paths) 8))
	      (do-choices-mt (path paths nthreads)
		(docopy path root remote))
	      (do-choices (path paths)
		(docopy path root remote))))))))

(define (distribute-web local (retall (config 'COPYALL)))
  (distribute local
	      (qc (s3/push! local (s3/mkpath root local) {".css" ".js"}
			    pubheaders forcewrite retall))
	      dist-targets))

(define image-suffixes
  {".svgz" ".png" ".gif" ".svg" ".jpg" ".jpeg" ".wav" ".ogg"})

(define apps.js {"bundle.js" "codexapp.js" "metabook.js"})
(define apps.css {"bundle.css" "codexapp.css" "metabook.css"})

(define (main (arg #f))
  (when (and arg (has-prefix arg "+"))
    (unless (position (slice arg 1) dist-targets)
      (write-file dist-targets-file
		  (glom (filestring dist-targets-file)
		    "\n" (slice arg 1))))
    (set! arg (slice arg 1)))
  (distribute-web "sbooks/")
  (distribute-web "fdjt/")
  (distribute-web "showsomeclass/")
  (let ((js (filedata "sbooks/codex.min.js.gz"))
	(css (filedata "sbooks/codex.css.gz")))
    (s3/put (s3/mkpath root "codexapp.js") js "text/javascript" gzheaders #t)
    (message "Updated "
	     (do-choices (p (s3/mkpath root "codexapp.js"))
	       (printout "\n\t" (gpath->string p))))
    (s3/put (s3/mkpath root "codexapp.css") css "text/css" gzheaders #t)
    (message "Updated "
	     (do-choices (p (s3/mkpath root "codexapp.css"))
	       (printout "\n\t" (gpath->string p))))
    (dolist (r dist-targets)
      (do-choices (path (choice apps.js apps.css))
	(s3/copy! (s3/mkpath root path) (s3/mkpath r path))
	(message "Updated " (gpath->string (s3/mkpath r path))))))
  (let ((js (filedata "sbooks/metabook.min.js.gz"))
	(css (filedata "sbooks/metabook.css.gz")))
    (s3/put (s3/mkpath root "metabook.js") js "text/javascript" gzheaders #t)
    (message "Updated "
	     (do-choices (p (s3/mkpath root "metabook.js"))
	       (printout "\n\t" (gpath->string p)))
	     " with " (length js) " bytes from "
	     "sbooks/metabook.min.js.gz")
    (s3/put (s3/mkpath root "metabook.css") css "text/css" gzheaders #t)
    (message "Updated "
	     (do-choices (p (s3/mkpath root "metabook.css"))
	       (printout "\n\t" (gpath->string p)))
	     " with " (length css) " bytes from "
	     "sbooks/metabook.css.gz")
    (dolist (r dist-targets)
      (do-choices (path (choice apps.js apps.css))
	(s3/copy! (s3/mkpath root path) (s3/mkpath r path))
	(message "Updated " (gpath->string (s3/mkpath r path))))))
  (do-choices (local graphics)
    (let ((changed-graphics (push-graphics local))
	  (allfiles (pick (getfiles local) has-suffix
			  image-suffixes)))
      (when (or arg (exists? changed-graphics))
	(message (choice-size changed-graphics) "/" (choice-size allfiles)
		 " changed graphics"
		 (if arg
		     " (copying all)"
		     (printout
		       (if (> (choice-size changed-graphics) 17) ": ")
		       (when (> (choice-size changed-graphics) 17)
			 (do-choices (g changed-graphics)
			   (printout "\n    "  (gpath->string g)))))))
	(distribute root
		    (if arg
			(qc (s3/mkpath root allfiles))
			(qc changed-graphics))
		    (if arg (list arg) dist-targets))))))





