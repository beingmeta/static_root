#!/usr/bin/env fdexec
;;; -*- Mode: Scheme; -*-
(use-module '{logger sbooks aws/s3 gpath mttools varconfig})

(define %loglevel %notify%)

(define root (->s3loc "s3://static.beingmeta.com/"))
(define pubheaders '("x-amz-acl: public-read"))
(define gzheaders '("x-amz-acl: public-read"
		    "Content-encoding\: gzip"))
(define graphics  {"g/codex/" "g/sbooks/" "g/beingmeta/" "g/showsomeclass/"})

(define dist-targets
  '("s3://beingmeta/static/" "s3://free.sbooks.net/static/"
    "s3://mysbooks/static/" "s3://edu.sbooks.net/static/"
    "s3://library.sbooks.net/static/"))
;;(set! dist-targets '("s3://beingmeta/static/"))

(define forcewrite #f)
(varconfig! force forcewrite config:boolean)

(define (push-graphics dir (hdrs pubheaders))
  (let ((updated
	 (choice (s3/push! dir (s3/mkpath root dir)
			   #{".png" ".gif" ".svg" ".jpg" ".jpeg" ".wav" ".ogg"}
			   hdrs forcewrite)
		 (s3/push! dir (s3/mkpath root dir) ".svgz"
			   gzheaders forcewrite))))
    updated))

(define (docopy file from to (hdrs pubheaders))
  (when (string? from) (set! from (->s3loc from)))
  (when (string? to) (set! to (->s3loc to)))
  (let* ((from (s3/mkpath from file))
	 (to (s3/mkpath to file)))
    (if forcewrite
	(begin (loginfo "Copying " (s3loc->string from)
			" to " (s3loc->string to))
	  (s3/copy! from to #f '() hdrs))
	(let ((frominfo (s3/info from))
	      (toinfo (s3/info to)))
	  (unless (and (exists? toinfo) (exists? frominfo) frominfo toinfo
		       (equal? (get toinfo 'etag) (get frominfo 'etag)))
	    (loginfo "Updating " (s3loc->string from) " to " (s3loc->string to))
	    (s3/copy! from to #f '() hdrs))))))

(define (strip-slash s) (if (has-prefix s "/") (slice s 1) s))

(define (copyall from to (hdrs pubheaders))
  (when (string? from) (set! from (->s3loc from)))
  (when (string? to) (set! to (->s3loc to)))
  (let* ((fromlist (s3/list+ from))
	 (tolist (s3/list+ to))
	 (locs (for-choices (info fromlist)
		 (if (has-suffix (get info 'key) "/") (fail)
		     (get info 'loc)))))
    (do-choices-mt (loc locs (config 's3copythreads (config 's3threads 8)))
      (let* ((from loc)
	     (to (s3/mkpath to (strip-slash (s3loc-path from))))
	     (frominfo (try (pick fromlist 'loc from)
			    (s3/info from)))
	     (toinfo (try (pick tolist 'loc to)
			  (s3/info to))))
	(unless (and (exists? toinfo) toinfo
		     (equal? (get toinfo 'etag)
			     (get frominfo 'etag)))
	  (s3/copy! from to #f '() hdrs))))))

(define (distribute local changed remotes)
  (set! remotes (map (lambda (x) (if (string? x) (->s3loc x) x))
		     remotes))
  (if (fail? changed)
      (lognotice "No changes under " local " to distribute")
      (lognotice "Distributing " (choice-size changed) " changes from "
		 local " to" (dolist (r remotes) (printout "\n\t" (s3loc->string r)))))
  (when (exists? changed)
    (let ((paths (strip-slash (s3loc-path changed))))
      (dolist (r remotes)
	(let* ((remote (s3/mkpath r local))
	       (nthreads (config 's3copythreads (config 's3threads 8))))
	  (logwarn "Distributing " (choice-size paths) " files to "
		   (s3loc->string remote))
	  (if (and (> nthreads 1) (> (choice-size paths) 8))
	      (do-choices-mt (path paths nthreads)
		(docopy path root remote))
	      (do-choices (path paths)
		(docopy path root remote))))))))

(define (distribute-web local)
  (distribute local
	      (qc (s3/push! local (s3/mkpath root local) {".css" ".js"}
			    pubheaders forcewrite))
	      dist-targets))

(define (main)
  (do-choices (local graphics)
    (let ((changed-graphics (push-graphics local)))
      (distribute local (qc changed-graphics) dist-targets)))
  (distribute-web "sbooks/")
  (distribute-web "fdjt/")
  (distribute-web "showsomeclass/")
  (let ((js (filedata "sbooks/codex.min.js.gz"))
	(css (filedata "sbooks/codex.css.gz")))
    (s3/put (s3/mkpath root {"sbooks/bundle.js" "codexapp.js"})
	    js "text/javascript" gzheaders #t)
    (s3/put (s3/mkpath root {"sbooks/bundle.css" "codexapp.css"})
	    css "text/css" gzheaders #t)
    (dolist (r dist-targets)
      (do-choices (path (glom {"sbooks/bundle" "codexapp"} {".css" ".js"}))
	(s3/copy! (s3/mkpath root path) (s3/mkpath r path))))))



